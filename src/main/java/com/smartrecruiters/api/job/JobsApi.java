/*
 * Jobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.job;

import com.smartrecruiters.api.job.invoker.ApiCallback;
import com.smartrecruiters.api.job.invoker.ApiClient;
import com.smartrecruiters.api.job.invoker.ApiException;
import com.smartrecruiters.api.job.invoker.ApiResponse;
import com.smartrecruiters.api.job.invoker.Configuration;
import com.smartrecruiters.api.job.invoker.Pair;
import com.smartrecruiters.api.job.invoker.ProgressRequestBody;
import com.smartrecruiters.api.job.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.job.model.ErrorResponse;
import com.smartrecruiters.api.job.model.HeadcountPatchRequest;
import com.smartrecruiters.api.job.model.HeadcountUpdateAccepted;
import com.smartrecruiters.api.job.model.HiringTeamMember;
import com.smartrecruiters.api.job.model.HiringTeamMemberResponse;
import com.smartrecruiters.api.job.model.HiringTeamMembers;
import com.smartrecruiters.api.job.model.JobAdContent;
import com.smartrecruiters.api.job.model.JobAdItem;
import com.smartrecruiters.api.job.model.JobAdPublicationScheduled;
import com.smartrecruiters.api.job.model.JobAdUnpublishScheduled;
import com.smartrecruiters.api.job.model.JobDetails;
import com.smartrecruiters.api.job.model.JobInput;
import com.smartrecruiters.api.job.model.JobNote;
import com.smartrecruiters.api.job.model.JobPosition;
import com.smartrecruiters.api.job.model.JobPositionInput;
import com.smartrecruiters.api.job.model.JobPositions;
import com.smartrecruiters.api.job.model.JobStatusHistory;
import com.smartrecruiters.api.job.model.JobStatusUpdate;
import com.smartrecruiters.api.job.model.Jobs;
import org.threeten.bp.OffsetDateTime;
import com.smartrecruiters.api.job.model.Path;
import com.smartrecruiters.api.job.model.Publication;
import com.smartrecruiters.api.job.model.PublicationList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for jobsAll
     * @param q full-text search query based on a job title; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param city city filter (part of the location object); can be used repeatedly; case sensitive; e.g. San Francisco (optional)
     * @param department department filter (by department label); can be used repeatedly; case sensitive; e.g. “Marketing” (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the job update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param lastActivityAfter ISO8601-formatted time boundaries for the job lastActivityOn time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ. lastActivityOn is updated when job is edited, new candidates apply or job is published.  (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;   Value \&quot;pt-PT\&quot; is deprecated and will not work, use \&quot;pt\&quot; instead.  (optional)
     * @param postingStatus Posting status of a job  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs matching search criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsAllCall(String q, Integer limit, Integer offset, List<String> city, List<String> department, OffsetDateTime updatedAfter, OffsetDateTime lastActivityAfter, String language, String postingStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (department != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "department", department));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAfter", updatedAfter));
        }

        if (lastActivityAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastActivityAfter", lastActivityAfter));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (postingStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postingStatus", postingStatus));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsAllValidateBeforeCall(String q, Integer limit, Integer offset, List<String> city, List<String> department, OffsetDateTime updatedAfter, OffsetDateTime lastActivityAfter, String language, String postingStatus, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = jobsAllCall(q, limit, offset, city, department, updatedAfter, lastActivityAfter, language, postingStatus, _callback);
        return localVarCall;

    }

    /**
     * Search jobs
     * Search jobs by params
     * @param q full-text search query based on a job title; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param city city filter (part of the location object); can be used repeatedly; case sensitive; e.g. San Francisco (optional)
     * @param department department filter (by department label); can be used repeatedly; case sensitive; e.g. “Marketing” (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the job update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param lastActivityAfter ISO8601-formatted time boundaries for the job lastActivityOn time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ. lastActivityOn is updated when job is edited, new candidates apply or job is published.  (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;   Value \&quot;pt-PT\&quot; is deprecated and will not work, use \&quot;pt\&quot; instead.  (optional)
     * @param postingStatus Posting status of a job  (optional)
     * @return Jobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs matching search criteria </td><td>  -  </td></tr>
     </table>
     */
    public Jobs jobsAll(String q, Integer limit, Integer offset, List<String> city, List<String> department, OffsetDateTime updatedAfter, OffsetDateTime lastActivityAfter, String language, String postingStatus) throws ApiException {
        ApiResponse<Jobs> localVarResp = jobsAllWithHttpInfo(q, limit, offset, city, department, updatedAfter, lastActivityAfter, language, postingStatus);
        return localVarResp.getData();
    }

    /**
     * Search jobs
     * Search jobs by params
     * @param q full-text search query based on a job title; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param city city filter (part of the location object); can be used repeatedly; case sensitive; e.g. San Francisco (optional)
     * @param department department filter (by department label); can be used repeatedly; case sensitive; e.g. “Marketing” (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the job update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param lastActivityAfter ISO8601-formatted time boundaries for the job lastActivityOn time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ. lastActivityOn is updated when job is edited, new candidates apply or job is published.  (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;   Value \&quot;pt-PT\&quot; is deprecated and will not work, use \&quot;pt\&quot; instead.  (optional)
     * @param postingStatus Posting status of a job  (optional)
     * @return ApiResponse&lt;Jobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs matching search criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jobs> jobsAllWithHttpInfo(String q, Integer limit, Integer offset, List<String> city, List<String> department, OffsetDateTime updatedAfter, OffsetDateTime lastActivityAfter, String language, String postingStatus) throws ApiException {
        okhttp3.Call localVarCall = jobsAllValidateBeforeCall(q, limit, offset, city, department, updatedAfter, lastActivityAfter, language, postingStatus, null);
        Type localVarReturnType = new TypeToken<Jobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search jobs (asynchronously)
     * Search jobs by params
     * @param q full-text search query based on a job title; case insensitive; e.g. java developer (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 10)
     * @param offset number of elements to skip while processing result (optional, default to 0)
     * @param city city filter (part of the location object); can be used repeatedly; case sensitive; e.g. San Francisco (optional)
     * @param department department filter (by department label); can be used repeatedly; case sensitive; e.g. “Marketing” (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the job update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param lastActivityAfter ISO8601-formatted time boundaries for the job lastActivityOn time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ. lastActivityOn is updated when job is edited, new candidates apply or job is published.  (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;   Value \&quot;pt-PT\&quot; is deprecated and will not work, use \&quot;pt\&quot; instead.  (optional)
     * @param postingStatus Posting status of a job  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Jobs matching search criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsAllAsync(String q, Integer limit, Integer offset, List<String> city, List<String> department, OffsetDateTime updatedAfter, OffsetDateTime lastActivityAfter, String language, String postingStatus, final ApiCallback<Jobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsAllValidateBeforeCall(q, limit, offset, city, department, updatedAfter, lastActivityAfter, language, postingStatus, _callback);
        Type localVarReturnType = new TypeToken<Jobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsCreate
     * @param jobInput Job object that needs to be created (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **EXPERIENCE_LEVEL_NOT_FOUND** when provided experience level does not exist, * **CITY_NOT_FOUND** when provided city does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **JOB_PROPERTY_PARENT_VALUE_MISSING** when job property is set but value for its parent is missing, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **JOB_PROPERTY_VALUE_NOT_AVAILABLE_FOR_SELECTED_PARENT_VALUE** when job property&#39;s value is not available for selected parent value, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code * **REF_NUMBER_ALREADY_EXISTS** when provided ref number already exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateCall(JobInput jobInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobInput;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCreateValidateBeforeCall(JobInput jobInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = jobsCreateCall(jobInput, _callback);
        return localVarCall;

    }

    /**
     * Create a new job
     * Create a new job. Ignores all nonexistent job properties and job properties values.
     * @param jobInput Job object that needs to be created (optional)
     * @return JobDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **EXPERIENCE_LEVEL_NOT_FOUND** when provided experience level does not exist, * **CITY_NOT_FOUND** when provided city does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **JOB_PROPERTY_PARENT_VALUE_MISSING** when job property is set but value for its parent is missing, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **JOB_PROPERTY_VALUE_NOT_AVAILABLE_FOR_SELECTED_PARENT_VALUE** when job property&#39;s value is not available for selected parent value, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code * **REF_NUMBER_ALREADY_EXISTS** when provided ref number already exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public JobDetails jobsCreate(JobInput jobInput) throws ApiException {
        ApiResponse<JobDetails> localVarResp = jobsCreateWithHttpInfo(jobInput);
        return localVarResp.getData();
    }

    /**
     * Create a new job
     * Create a new job. Ignores all nonexistent job properties and job properties values.
     * @param jobInput Job object that needs to be created (optional)
     * @return ApiResponse&lt;JobDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **EXPERIENCE_LEVEL_NOT_FOUND** when provided experience level does not exist, * **CITY_NOT_FOUND** when provided city does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **JOB_PROPERTY_PARENT_VALUE_MISSING** when job property is set but value for its parent is missing, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **JOB_PROPERTY_VALUE_NOT_AVAILABLE_FOR_SELECTED_PARENT_VALUE** when job property&#39;s value is not available for selected parent value, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code * **REF_NUMBER_ALREADY_EXISTS** when provided ref number already exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDetails> jobsCreateWithHttpInfo(JobInput jobInput) throws ApiException {
        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(jobInput, null);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new job (asynchronously)
     * Create a new job. Ignores all nonexistent job properties and job properties values.
     * @param jobInput Job object that needs to be created (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **EXPERIENCE_LEVEL_NOT_FOUND** when provided experience level does not exist, * **CITY_NOT_FOUND** when provided city does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **JOB_PROPERTY_PARENT_VALUE_MISSING** when job property is set but value for its parent is missing, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **JOB_PROPERTY_VALUE_NOT_AVAILABLE_FOR_SELECTED_PARENT_VALUE** when job property&#39;s value is not available for selected parent value, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with code * **REF_NUMBER_ALREADY_EXISTS** when provided ref number already exists  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateAsync(JobInput jobInput, final ApiCallback<JobDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(jobInput, _callback);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsGet(Async)");
        }
        

        okhttp3.Call localVarCall = jobsGetCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Get content of a job with a given id.
     * Get content of a job with a given id.
     * @param jobId job identifier (required)
     * @return JobDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public JobDetails jobsGet(String jobId) throws ApiException {
        ApiResponse<JobDetails> localVarResp = jobsGetWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get content of a job with a given id.
     * Get content of a job with a given id.
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;JobDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDetails> jobsGetWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get content of a job with a given id. (asynchronously)
     * Get content of a job with a given id.
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(String jobId, final ApiCallback<JobDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsHeadcountUpdate
     * @param jobId job identifier (required)
     * @param headcountPatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted headcount update request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with codes * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_NOT_ENABLED** when approval process is not enabled  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **CANNOT_START_APPROVAL_PROCESS** when approval process cannot be started * **INVALID_SALARY_RANGE** when salary range is not valid  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHeadcountUpdateCall(String jobId, HeadcountPatchRequest headcountPatchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = headcountPatchRequest;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/headcount"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsHeadcountUpdateValidateBeforeCall(String jobId, HeadcountPatchRequest headcountPatchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsHeadcountUpdate(Async)");
        }
        
        // verify the required parameter 'headcountPatchRequest' is set
        if (headcountPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'headcountPatchRequest' when calling jobsHeadcountUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsHeadcountUpdateCall(jobId, headcountPatchRequest, _callback);
        return localVarCall;

    }

    /**
     * Update job headcount.
     * Update job headcount.
     * @param jobId job identifier (required)
     * @param headcountPatchRequest  (required)
     * @return HeadcountUpdateAccepted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted headcount update request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with codes * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_NOT_ENABLED** when approval process is not enabled  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **CANNOT_START_APPROVAL_PROCESS** when approval process cannot be started * **INVALID_SALARY_RANGE** when salary range is not valid  </td><td>  -  </td></tr>
     </table>
     */
    public HeadcountUpdateAccepted jobsHeadcountUpdate(String jobId, HeadcountPatchRequest headcountPatchRequest) throws ApiException {
        ApiResponse<HeadcountUpdateAccepted> localVarResp = jobsHeadcountUpdateWithHttpInfo(jobId, headcountPatchRequest);
        return localVarResp.getData();
    }

    /**
     * Update job headcount.
     * Update job headcount.
     * @param jobId job identifier (required)
     * @param headcountPatchRequest  (required)
     * @return ApiResponse&lt;HeadcountUpdateAccepted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted headcount update request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with codes * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_NOT_ENABLED** when approval process is not enabled  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **CANNOT_START_APPROVAL_PROCESS** when approval process cannot be started * **INVALID_SALARY_RANGE** when salary range is not valid  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeadcountUpdateAccepted> jobsHeadcountUpdateWithHttpInfo(String jobId, HeadcountPatchRequest headcountPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = jobsHeadcountUpdateValidateBeforeCall(jobId, headcountPatchRequest, null);
        Type localVarReturnType = new TypeToken<HeadcountUpdateAccepted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update job headcount. (asynchronously)
     * Update job headcount.
     * @param jobId job identifier (required)
     * @param headcountPatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted headcount update request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with codes * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_NOT_ENABLED** when approval process is not enabled  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **CANNOT_START_APPROVAL_PROCESS** when approval process cannot be started * **INVALID_SALARY_RANGE** when salary range is not valid  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHeadcountUpdateAsync(String jobId, HeadcountPatchRequest headcountPatchRequest, final ApiCallback<HeadcountUpdateAccepted> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsHeadcountUpdateValidateBeforeCall(jobId, headcountPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<HeadcountUpdateAccepted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsHiringTeamAdd
     * @param jobId job identifier (required)
     * @param hiringTeamMember HiringTeamMember object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Added hiring team member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code *USER_NOT_FOUND* when user with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User is already a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHiringTeamAddCall(String jobId, HiringTeamMember hiringTeamMember, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = hiringTeamMember;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/hiring-team"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsHiringTeamAddValidateBeforeCall(String jobId, HiringTeamMember hiringTeamMember, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsHiringTeamAdd(Async)");
        }
        

        okhttp3.Call localVarCall = jobsHiringTeamAddCall(jobId, hiringTeamMember, _callback);
        return localVarCall;

    }

    /**
     * Add hiring team member of a job with a given id.
     * Add hiring team member of a job with a given id
     * @param jobId job identifier (required)
     * @param hiringTeamMember HiringTeamMember object (optional)
     * @return HiringTeamMemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Added hiring team member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code *USER_NOT_FOUND* when user with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User is already a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public HiringTeamMemberResponse jobsHiringTeamAdd(String jobId, HiringTeamMember hiringTeamMember) throws ApiException {
        ApiResponse<HiringTeamMemberResponse> localVarResp = jobsHiringTeamAddWithHttpInfo(jobId, hiringTeamMember);
        return localVarResp.getData();
    }

    /**
     * Add hiring team member of a job with a given id.
     * Add hiring team member of a job with a given id
     * @param jobId job identifier (required)
     * @param hiringTeamMember HiringTeamMember object (optional)
     * @return ApiResponse&lt;HiringTeamMemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Added hiring team member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code *USER_NOT_FOUND* when user with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User is already a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiringTeamMemberResponse> jobsHiringTeamAddWithHttpInfo(String jobId, HiringTeamMember hiringTeamMember) throws ApiException {
        okhttp3.Call localVarCall = jobsHiringTeamAddValidateBeforeCall(jobId, hiringTeamMember, null);
        Type localVarReturnType = new TypeToken<HiringTeamMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add hiring team member of a job with a given id. (asynchronously)
     * Add hiring team member of a job with a given id
     * @param jobId job identifier (required)
     * @param hiringTeamMember HiringTeamMember object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Added hiring team member </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code *USER_NOT_FOUND* when user with given id does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User is already a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHiringTeamAddAsync(String jobId, HiringTeamMember hiringTeamMember, final ApiCallback<HiringTeamMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsHiringTeamAddValidateBeforeCall(jobId, hiringTeamMember, _callback);
        Type localVarReturnType = new TypeToken<HiringTeamMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsHiringTeamGet
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring team members </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHiringTeamGetCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/hiring-team"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsHiringTeamGetValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsHiringTeamGet(Async)");
        }
        

        okhttp3.Call localVarCall = jobsHiringTeamGetCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Get hiring team of a job with a given id.
     * Get hiring team of a job with a given id.
     * @param jobId job identifier (required)
     * @return HiringTeamMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring team members </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public HiringTeamMembers jobsHiringTeamGet(String jobId) throws ApiException {
        ApiResponse<HiringTeamMembers> localVarResp = jobsHiringTeamGetWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get hiring team of a job with a given id.
     * Get hiring team of a job with a given id.
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;HiringTeamMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring team members </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HiringTeamMembers> jobsHiringTeamGetWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsHiringTeamGetValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<HiringTeamMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hiring team of a job with a given id. (asynchronously)
     * Get hiring team of a job with a given id.
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hiring team members </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHiringTeamGetAsync(String jobId, final ApiCallback<HiringTeamMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsHiringTeamGetValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<HiringTeamMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsHiringTeamRemove
     * @param jobId job identifier (required)
     * @param userId user identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code &#39;INVALID_HIRING_TEAM_STATE&#39; when removing the last hiring team member. Each hiring team should have at least one member. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHiringTeamRemoveCall(String jobId, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/hiring-team/{userId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsHiringTeamRemoveValidateBeforeCall(String jobId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsHiringTeamRemove(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling jobsHiringTeamRemove(Async)");
        }
        

        okhttp3.Call localVarCall = jobsHiringTeamRemoveCall(jobId, userId, _callback);
        return localVarCall;

    }

    /**
     * Removes hiring team member of a job with a given id.
     * Removes hiring team member of a job with a given id.
     * @param jobId job identifier (required)
     * @param userId user identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code &#39;INVALID_HIRING_TEAM_STATE&#39; when removing the last hiring team member. Each hiring team should have at least one member. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public void jobsHiringTeamRemove(String jobId, String userId) throws ApiException {
        jobsHiringTeamRemoveWithHttpInfo(jobId, userId);
    }

    /**
     * Removes hiring team member of a job with a given id.
     * Removes hiring team member of a job with a given id.
     * @param jobId job identifier (required)
     * @param userId user identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code &#39;INVALID_HIRING_TEAM_STATE&#39; when removing the last hiring team member. Each hiring team should have at least one member. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsHiringTeamRemoveWithHttpInfo(String jobId, String userId) throws ApiException {
        okhttp3.Call localVarCall = jobsHiringTeamRemoveValidateBeforeCall(jobId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes hiring team member of a job with a given id. (asynchronously)
     * Removes hiring team member of a job with a given id.
     * @param jobId job identifier (required)
     * @param userId user identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> With code &#39;INVALID_HIRING_TEAM_STATE&#39; when removing the last hiring team member. Each hiring team should have at least one member. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not a member of the hiring team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsHiringTeamRemoveAsync(String jobId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsHiringTeamRemoveValidateBeforeCall(jobId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsAll
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s job ads </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsAllCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsAllValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsAll(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsAllCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Find and list job ads for a given job
     * 
     * @param jobId job identifier (required)
     * @return List&lt;JobAdItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s job ads </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public List<JobAdItem> jobsJobadsAll(String jobId) throws ApiException {
        ApiResponse<List<JobAdItem>> localVarResp = jobsJobadsAllWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Find and list job ads for a given job
     * 
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;List&lt;JobAdItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s job ads </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobAdItem>> jobsJobadsAllWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsAllValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<List<JobAdItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find and list job ads for a given job (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s job ads </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsAllAsync(String jobId, final ApiCallback<List<JobAdItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsAllValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<List<JobAdItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsCreate
     * @param jobId job identifier (required)
     * @param jobAdContent job ad (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created job ad. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_AD_LIMIT_REACHED** when job add limit (100 per job) is reached * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsCreateCall(String jobId, JobAdContent jobAdContent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobAdContent;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsCreateValidateBeforeCall(String jobId, JobAdContent jobAdContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsCreate(Async)");
        }
        
        // verify the required parameter 'jobAdContent' is set
        if (jobAdContent == null) {
            throw new ApiException("Missing the required parameter 'jobAdContent' when calling jobsJobadsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsCreateCall(jobId, jobAdContent, _callback);
        return localVarCall;

    }

    /**
     * Create a new job ad
     * 
     * @param jobId job identifier (required)
     * @param jobAdContent job ad (required)
     * @return JobAdItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created job ad. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_AD_LIMIT_REACHED** when job add limit (100 per job) is reached * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public JobAdItem jobsJobadsCreate(String jobId, JobAdContent jobAdContent) throws ApiException {
        ApiResponse<JobAdItem> localVarResp = jobsJobadsCreateWithHttpInfo(jobId, jobAdContent);
        return localVarResp.getData();
    }

    /**
     * Create a new job ad
     * 
     * @param jobId job identifier (required)
     * @param jobAdContent job ad (required)
     * @return ApiResponse&lt;JobAdItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created job ad. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_AD_LIMIT_REACHED** when job add limit (100 per job) is reached * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobAdItem> jobsJobadsCreateWithHttpInfo(String jobId, JobAdContent jobAdContent) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsCreateValidateBeforeCall(jobId, jobAdContent, null);
        Type localVarReturnType = new TypeToken<JobAdItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new job ad (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param jobAdContent job ad (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created job ad. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **JOB_AD_LIMIT_REACHED** when job add limit (100 per job) is reached * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsCreateAsync(String jobId, JobAdContent jobAdContent, final ApiCallback<JobAdItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsCreateValidateBeforeCall(jobId, jobAdContent, _callback);
        Type localVarReturnType = new TypeToken<JobAdItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsGet
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job ad </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsGetCall(String jobId, String jobAdId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads/{jobAdId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "jobAdId" + "\\}", localVarApiClient.escapeString(jobAdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsGetValidateBeforeCall(String jobId, String jobAdId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsGet(Async)");
        }
        
        // verify the required parameter 'jobAdId' is set
        if (jobAdId == null) {
            throw new ApiException("Missing the required parameter 'jobAdId' when calling jobsJobadsGet(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsGetCall(jobId, jobAdId, _callback);
        return localVarCall;

    }

    /**
     * Get a job ad
     * 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @return JobAdItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job ad </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public JobAdItem jobsJobadsGet(String jobId, String jobAdId) throws ApiException {
        ApiResponse<JobAdItem> localVarResp = jobsJobadsGetWithHttpInfo(jobId, jobAdId);
        return localVarResp.getData();
    }

    /**
     * Get a job ad
     * 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @return ApiResponse&lt;JobAdItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job ad </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobAdItem> jobsJobadsGetWithHttpInfo(String jobId, String jobAdId) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsGetValidateBeforeCall(jobId, jobAdId, null);
        Type localVarReturnType = new TypeToken<JobAdItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a job ad (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job ad </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsGetAsync(String jobId, String jobAdId, final ApiCallback<JobAdItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsGetValidateBeforeCall(jobId, jobAdId, _callback);
        Type localVarReturnType = new TypeToken<JobAdItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsPostingsAll
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param activeOnly publication status filter; when omitted, defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to access job ad postings  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsPostingsAllCall(String jobId, String jobAdId, Boolean activeOnly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads/{jobAdId}/postings"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "jobAdId" + "\\}", localVarApiClient.escapeString(jobAdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activeOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activeOnly", activeOnly));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsPostingsAllValidateBeforeCall(String jobId, String jobAdId, Boolean activeOnly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsPostingsAll(Async)");
        }
        
        // verify the required parameter 'jobAdId' is set
        if (jobAdId == null) {
            throw new ApiException("Missing the required parameter 'jobAdId' when calling jobsJobadsPostingsAll(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsPostingsAllCall(jobId, jobAdId, activeOnly, _callback);
        return localVarCall;

    }

    /**
     * List publications for a job ad
     * List publications for a job ad
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param activeOnly publication status filter; when omitted, defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @return PublicationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to access job ad postings  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public PublicationList jobsJobadsPostingsAll(String jobId, String jobAdId, Boolean activeOnly) throws ApiException {
        ApiResponse<PublicationList> localVarResp = jobsJobadsPostingsAllWithHttpInfo(jobId, jobAdId, activeOnly);
        return localVarResp.getData();
    }

    /**
     * List publications for a job ad
     * List publications for a job ad
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param activeOnly publication status filter; when omitted, defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @return ApiResponse&lt;PublicationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to access job ad postings  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicationList> jobsJobadsPostingsAllWithHttpInfo(String jobId, String jobAdId, Boolean activeOnly) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsPostingsAllValidateBeforeCall(jobId, jobAdId, activeOnly, null);
        Type localVarReturnType = new TypeToken<PublicationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List publications for a job ad (asynchronously)
     * List publications for a job ad
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param activeOnly publication status filter; when omitted, defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to access job ad postings  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsPostingsAllAsync(String jobId, String jobAdId, Boolean activeOnly, final ApiCallback<PublicationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsPostingsAllValidateBeforeCall(jobId, jobAdId, activeOnly, _callback);
        Type localVarReturnType = new TypeToken<PublicationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsPostingsCreate
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param publication Publication object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Posting scheduled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorize to publish a job ad  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_NOT_POSTED** when default job ad for the job has not been published  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsPostingsCreateCall(String jobId, String jobAdId, Publication publication, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = publication;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads/{jobAdId}/postings"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "jobAdId" + "\\}", localVarApiClient.escapeString(jobAdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsPostingsCreateValidateBeforeCall(String jobId, String jobAdId, Publication publication, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsPostingsCreate(Async)");
        }
        
        // verify the required parameter 'jobAdId' is set
        if (jobAdId == null) {
            throw new ApiException("Missing the required parameter 'jobAdId' when calling jobsJobadsPostingsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsPostingsCreateCall(jobId, jobAdId, publication, _callback);
        return localVarCall;

    }

    /**
     * Publishes a job ad
     * Publishes a job ad to internal sources (Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API) and optionally to all free job aggregators.  By default it&#39;s set to publish to job aggregators  It reflects a Publish action available in the SmartRecruiters UI.  Note: Internal sources depend on a company&#39;s payment plan. 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param publication Publication object (optional)
     * @return JobAdPublicationScheduled
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Posting scheduled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorize to publish a job ad  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_NOT_POSTED** when default job ad for the job has not been published  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public JobAdPublicationScheduled jobsJobadsPostingsCreate(String jobId, String jobAdId, Publication publication) throws ApiException {
        ApiResponse<JobAdPublicationScheduled> localVarResp = jobsJobadsPostingsCreateWithHttpInfo(jobId, jobAdId, publication);
        return localVarResp.getData();
    }

    /**
     * Publishes a job ad
     * Publishes a job ad to internal sources (Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API) and optionally to all free job aggregators.  By default it&#39;s set to publish to job aggregators  It reflects a Publish action available in the SmartRecruiters UI.  Note: Internal sources depend on a company&#39;s payment plan. 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param publication Publication object (optional)
     * @return ApiResponse&lt;JobAdPublicationScheduled&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Posting scheduled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorize to publish a job ad  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_NOT_POSTED** when default job ad for the job has not been published  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobAdPublicationScheduled> jobsJobadsPostingsCreateWithHttpInfo(String jobId, String jobAdId, Publication publication) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsPostingsCreateValidateBeforeCall(jobId, jobAdId, publication, null);
        Type localVarReturnType = new TypeToken<JobAdPublicationScheduled>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publishes a job ad (asynchronously)
     * Publishes a job ad to internal sources (Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API) and optionally to all free job aggregators.  By default it&#39;s set to publish to job aggregators  It reflects a Publish action available in the SmartRecruiters UI.  Note: Internal sources depend on a company&#39;s payment plan. 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param publication Publication object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Posting scheduled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorize to publish a job ad  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_NOT_POSTED** when default job ad for the job has not been published  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsPostingsCreateAsync(String jobId, String jobAdId, Publication publication, final ApiCallback<JobAdPublicationScheduled> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsPostingsCreateValidateBeforeCall(jobId, jobAdId, publication, _callback);
        Type localVarReturnType = new TypeToken<JobAdPublicationScheduled>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsPostingsUnpublish
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Unpost scheduled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to unpublish job ad  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsPostingsUnpublishCall(String jobId, String jobAdId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads/{jobAdId}/postings"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "jobAdId" + "\\}", localVarApiClient.escapeString(jobAdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsPostingsUnpublishValidateBeforeCall(String jobId, String jobAdId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsPostingsUnpublish(Async)");
        }
        
        // verify the required parameter 'jobAdId' is set
        if (jobAdId == null) {
            throw new ApiException("Missing the required parameter 'jobAdId' when calling jobsJobadsPostingsUnpublish(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsPostingsUnpublishCall(jobId, jobAdId, _callback);
        return localVarCall;

    }

    /**
     * Unpublish a job ad
     * Unpublishes a job ad from all sources.  **Unpublishing a default job ad will unpublish all other job ads within that job.** 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @return JobAdUnpublishScheduled
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Unpost scheduled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to unpublish job ad  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public JobAdUnpublishScheduled jobsJobadsPostingsUnpublish(String jobId, String jobAdId) throws ApiException {
        ApiResponse<JobAdUnpublishScheduled> localVarResp = jobsJobadsPostingsUnpublishWithHttpInfo(jobId, jobAdId);
        return localVarResp.getData();
    }

    /**
     * Unpublish a job ad
     * Unpublishes a job ad from all sources.  **Unpublishing a default job ad will unpublish all other job ads within that job.** 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @return ApiResponse&lt;JobAdUnpublishScheduled&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Unpost scheduled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to unpublish job ad  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobAdUnpublishScheduled> jobsJobadsPostingsUnpublishWithHttpInfo(String jobId, String jobAdId) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsPostingsUnpublishValidateBeforeCall(jobId, jobAdId, null);
        Type localVarReturnType = new TypeToken<JobAdUnpublishScheduled>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish a job ad (asynchronously)
     * Unpublishes a job ad from all sources.  **Unpublishing a default job ad will unpublish all other job ads within that job.** 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Unpost scheduled </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **ACCESS_FORBIDDEN** when user is not authorized to unpublish job ad  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with code * **JOBAD_NOT_FOUND** when job ad has not been found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsPostingsUnpublishAsync(String jobId, String jobAdId, final ApiCallback<JobAdUnpublishScheduled> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsPostingsUnpublishValidateBeforeCall(jobId, jobAdId, _callback);
        Type localVarReturnType = new TypeToken<JobAdUnpublishScheduled>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobadsUpdate
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param jobAdContent job ad (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job ad </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsUpdateCall(String jobId, String jobAdId, JobAdContent jobAdContent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobAdContent;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/jobads/{jobAdId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "jobAdId" + "\\}", localVarApiClient.escapeString(jobAdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobadsUpdateValidateBeforeCall(String jobId, String jobAdId, JobAdContent jobAdContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobadsUpdate(Async)");
        }
        
        // verify the required parameter 'jobAdId' is set
        if (jobAdId == null) {
            throw new ApiException("Missing the required parameter 'jobAdId' when calling jobsJobadsUpdate(Async)");
        }
        
        // verify the required parameter 'jobAdContent' is set
        if (jobAdContent == null) {
            throw new ApiException("Missing the required parameter 'jobAdContent' when calling jobsJobadsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsJobadsUpdateCall(jobId, jobAdId, jobAdContent, _callback);
        return localVarCall;

    }

    /**
     * Update a job ad
     * Enables you to update an existing job ad. NOTE: In order for a job ad changes to be reflected on internal sources (Career Sites, Job Widgets etc.) and Job Aggregators, you need to Publish the job ad after making an update. 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param jobAdContent job ad (required)
     * @return JobAdItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job ad </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public JobAdItem jobsJobadsUpdate(String jobId, String jobAdId, JobAdContent jobAdContent) throws ApiException {
        ApiResponse<JobAdItem> localVarResp = jobsJobadsUpdateWithHttpInfo(jobId, jobAdId, jobAdContent);
        return localVarResp.getData();
    }

    /**
     * Update a job ad
     * Enables you to update an existing job ad. NOTE: In order for a job ad changes to be reflected on internal sources (Career Sites, Job Widgets etc.) and Job Aggregators, you need to Publish the job ad after making an update. 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param jobAdContent job ad (required)
     * @return ApiResponse&lt;JobAdItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job ad </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobAdItem> jobsJobadsUpdateWithHttpInfo(String jobId, String jobAdId, JobAdContent jobAdContent) throws ApiException {
        okhttp3.Call localVarCall = jobsJobadsUpdateValidateBeforeCall(jobId, jobAdId, jobAdContent, null);
        Type localVarReturnType = new TypeToken<JobAdItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a job ad (asynchronously)
     * Enables you to update an existing job ad. NOTE: In order for a job ad changes to be reflected on internal sources (Career Sites, Job Widgets etc.) and Job Aggregators, you need to Publish the job ad after making an update. 
     * @param jobId job identifier (required)
     * @param jobAdId job ad identifier (required)
     * @param jobAdContent job ad (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job ad </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PROPERTY_INVALID** when one of job ad attribute contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job or job ad not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobadsUpdateAsync(String jobId, String jobAdId, JobAdContent jobAdContent, final ApiCallback<JobAdItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobadsUpdateValidateBeforeCall(jobId, jobAdId, jobAdContent, _callback);
        Type localVarReturnType = new TypeToken<JobAdItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsNotesGet
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job note not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsNotesGetCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/note"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsNotesGetValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsNotesGet(Async)");
        }
        

        okhttp3.Call localVarCall = jobsNotesGetCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Get note of a job.
     * 
     * @param jobId job identifier (required)
     * @return JobNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job note not found </td><td>  -  </td></tr>
     </table>
     */
    public JobNote jobsNotesGet(String jobId) throws ApiException {
        ApiResponse<JobNote> localVarResp = jobsNotesGetWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get note of a job.
     * 
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;JobNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job note not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobNote> jobsNotesGetWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsNotesGetValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get note of a job. (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job note not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsNotesGetAsync(String jobId, final ApiCallback<JobNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsNotesGetValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsNotesUpdate
     * @param jobId job identifier (required)
     * @param jobNote  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsNotesUpdateCall(String jobId, JobNote jobNote, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobNote;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/note"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsNotesUpdateValidateBeforeCall(String jobId, JobNote jobNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsNotesUpdate(Async)");
        }
        
        // verify the required parameter 'jobNote' is set
        if (jobNote == null) {
            throw new ApiException("Missing the required parameter 'jobNote' when calling jobsNotesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsNotesUpdateCall(jobId, jobNote, _callback);
        return localVarCall;

    }

    /**
     * Update note of a job.
     * Update note of a job.
     * @param jobId job identifier (required)
     * @param jobNote  (required)
     * @return JobNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public JobNote jobsNotesUpdate(String jobId, JobNote jobNote) throws ApiException {
        ApiResponse<JobNote> localVarResp = jobsNotesUpdateWithHttpInfo(jobId, jobNote);
        return localVarResp.getData();
    }

    /**
     * Update note of a job.
     * Update note of a job.
     * @param jobId job identifier (required)
     * @param jobNote  (required)
     * @return ApiResponse&lt;JobNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobNote> jobsNotesUpdateWithHttpInfo(String jobId, JobNote jobNote) throws ApiException {
        okhttp3.Call localVarCall = jobsNotesUpdateValidateBeforeCall(jobId, jobNote, null);
        Type localVarReturnType = new TypeToken<JobNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update note of a job. (asynchronously)
     * Update note of a job.
     * @param jobId job identifier (required)
     * @param jobNote  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated note. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsNotesUpdateAsync(String jobId, JobNote jobNote, final ApiCallback<JobNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsNotesUpdateValidateBeforeCall(jobId, jobNote, _callback);
        Type localVarReturnType = new TypeToken<JobNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPatch
     * @param jobId job identifier (required)
     * @param path patch request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to change job to a job template.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPatchCall(String jobId, List<Path> path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = path;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPatchValidateBeforeCall(String jobId, List<Path> path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPatchCall(jobId, path, _callback);
        return localVarCall;

    }

    /**
     * Update a job
     * Update a job. All attributes that are used when creating a job can be used. Ignores all nonexistent job properties and job properties values.
     * @param jobId job identifier (required)
     * @param path patch request (optional)
     * @return JobDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to change job to a job template.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public JobDetails jobsPatch(String jobId, List<Path> path) throws ApiException {
        ApiResponse<JobDetails> localVarResp = jobsPatchWithHttpInfo(jobId, path);
        return localVarResp.getData();
    }

    /**
     * Update a job
     * Update a job. All attributes that are used when creating a job can be used. Ignores all nonexistent job properties and job properties values.
     * @param jobId job identifier (required)
     * @param path patch request (optional)
     * @return ApiResponse&lt;JobDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to change job to a job template.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDetails> jobsPatchWithHttpInfo(String jobId, List<Path> path) throws ApiException {
        okhttp3.Call localVarCall = jobsPatchValidateBeforeCall(jobId, path, null);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a job (asynchronously)
     * Update a job. All attributes that are used when creating a job can be used. Ignores all nonexistent job properties and job properties values.
     * @param jobId job identifier (required)
     * @param path patch request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to change job to a job template.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPatchAsync(String jobId, List<Path> path, final ApiCallback<JobDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPatchValidateBeforeCall(jobId, path, _callback);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPositionsAll
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s positions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsAllCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/positions"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPositionsAllValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPositionsAll(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPositionsAllCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Positions for a job
     * 
     * @param jobId job identifier (required)
     * @return JobPositions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s positions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public JobPositions jobsPositionsAll(String jobId) throws ApiException {
        ApiResponse<JobPositions> localVarResp = jobsPositionsAllWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Positions for a job
     * 
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;JobPositions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s positions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPositions> jobsPositionsAllWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsPositionsAllValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobPositions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Positions for a job (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job&#39;s positions </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsAllAsync(String jobId, final ApiCallback<JobPositions> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPositionsAllValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobPositions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPositionsCreate
     * @param jobId job identifier (required)
     * @param jobPositionInput Position body object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsCreateCall(String jobId, JobPositionInput jobPositionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobPositionInput;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/positions"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPositionsCreateValidateBeforeCall(String jobId, JobPositionInput jobPositionInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPositionsCreate(Async)");
        }
        
        // verify the required parameter 'jobPositionInput' is set
        if (jobPositionInput == null) {
            throw new ApiException("Missing the required parameter 'jobPositionInput' when calling jobsPositionsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPositionsCreateCall(jobId, jobPositionInput, _callback);
        return localVarCall;

    }

    /**
     * Create a new position for a job
     * 
     * @param jobId job identifier (required)
     * @param jobPositionInput Position body object (required)
     * @return JobPosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
     </table>
     */
    public JobPosition jobsPositionsCreate(String jobId, JobPositionInput jobPositionInput) throws ApiException {
        ApiResponse<JobPosition> localVarResp = jobsPositionsCreateWithHttpInfo(jobId, jobPositionInput);
        return localVarResp.getData();
    }

    /**
     * Create a new position for a job
     * 
     * @param jobId job identifier (required)
     * @param jobPositionInput Position body object (required)
     * @return ApiResponse&lt;JobPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPosition> jobsPositionsCreateWithHttpInfo(String jobId, JobPositionInput jobPositionInput) throws ApiException {
        okhttp3.Call localVarCall = jobsPositionsCreateValidateBeforeCall(jobId, jobPositionInput, null);
        Type localVarReturnType = new TypeToken<JobPosition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new position for a job (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param jobPositionInput Position body object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsCreateAsync(String jobId, JobPositionInput jobPositionInput, final ApiCallback<JobPosition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPositionsCreateValidateBeforeCall(jobId, jobPositionInput, _callback);
        Type localVarReturnType = new TypeToken<JobPosition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPositionsGet
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsGetCall(String jobId, String positionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/positions/{positionId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "positionId" + "\\}", localVarApiClient.escapeString(positionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPositionsGetValidateBeforeCall(String jobId, String positionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPositionsGet(Async)");
        }
        
        // verify the required parameter 'positionId' is set
        if (positionId == null) {
            throw new ApiException("Missing the required parameter 'positionId' when calling jobsPositionsGet(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPositionsGetCall(jobId, positionId, _callback);
        return localVarCall;

    }

    /**
     * Get a single position
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @return JobPosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public JobPosition jobsPositionsGet(String jobId, String positionId) throws ApiException {
        ApiResponse<JobPosition> localVarResp = jobsPositionsGetWithHttpInfo(jobId, positionId);
        return localVarResp.getData();
    }

    /**
     * Get a single position
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @return ApiResponse&lt;JobPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPosition> jobsPositionsGetWithHttpInfo(String jobId, String positionId) throws ApiException {
        okhttp3.Call localVarCall = jobsPositionsGetValidateBeforeCall(jobId, positionId, null);
        Type localVarReturnType = new TypeToken<JobPosition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single position (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsGetAsync(String jobId, String positionId, final ApiCallback<JobPosition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPositionsGetValidateBeforeCall(jobId, positionId, _callback);
        Type localVarReturnType = new TypeToken<JobPosition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPositionsRemove
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Position successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code **POSITION_ASSIGNED** when position has candidate already assigned and cannot be removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsRemoveCall(String jobId, String positionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/positions/{positionId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "positionId" + "\\}", localVarApiClient.escapeString(positionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPositionsRemoveValidateBeforeCall(String jobId, String positionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPositionsRemove(Async)");
        }
        
        // verify the required parameter 'positionId' is set
        if (positionId == null) {
            throw new ApiException("Missing the required parameter 'positionId' when calling jobsPositionsRemove(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPositionsRemoveCall(jobId, positionId, _callback);
        return localVarCall;

    }

    /**
     * Delete position
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Position successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code **POSITION_ASSIGNED** when position has candidate already assigned and cannot be removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public void jobsPositionsRemove(String jobId, String positionId) throws ApiException {
        jobsPositionsRemoveWithHttpInfo(jobId, positionId);
    }

    /**
     * Delete position
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Position successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code **POSITION_ASSIGNED** when position has candidate already assigned and cannot be removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsPositionsRemoveWithHttpInfo(String jobId, String positionId) throws ApiException {
        okhttp3.Call localVarCall = jobsPositionsRemoveValidateBeforeCall(jobId, positionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete position (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Position successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code **POSITION_ASSIGNED** when position has candidate already assigned and cannot be removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsRemoveAsync(String jobId, String positionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPositionsRemoveValidateBeforeCall(jobId, positionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPositionsUpdate
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param jobPositionInput Position body object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsUpdateCall(String jobId, String positionId, JobPositionInput jobPositionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobPositionInput;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/positions/{positionId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()))
            .replaceAll("\\{" + "positionId" + "\\}", localVarApiClient.escapeString(positionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPositionsUpdateValidateBeforeCall(String jobId, String positionId, JobPositionInput jobPositionInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPositionsUpdate(Async)");
        }
        
        // verify the required parameter 'positionId' is set
        if (positionId == null) {
            throw new ApiException("Missing the required parameter 'positionId' when calling jobsPositionsUpdate(Async)");
        }
        
        // verify the required parameter 'jobPositionInput' is set
        if (jobPositionInput == null) {
            throw new ApiException("Missing the required parameter 'jobPositionInput' when calling jobsPositionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPositionsUpdateCall(jobId, positionId, jobPositionInput, _callback);
        return localVarCall;

    }

    /**
     * Update position
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param jobPositionInput Position body object (required)
     * @return JobPosition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public JobPosition jobsPositionsUpdate(String jobId, String positionId, JobPositionInput jobPositionInput) throws ApiException {
        ApiResponse<JobPosition> localVarResp = jobsPositionsUpdateWithHttpInfo(jobId, positionId, jobPositionInput);
        return localVarResp.getData();
    }

    /**
     * Update position
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param jobPositionInput Position body object (required)
     * @return ApiResponse&lt;JobPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobPosition> jobsPositionsUpdateWithHttpInfo(String jobId, String positionId, JobPositionInput jobPositionInput) throws ApiException {
        okhttp3.Call localVarCall = jobsPositionsUpdateValidateBeforeCall(jobId, positionId, jobPositionInput, null);
        Type localVarReturnType = new TypeToken<JobPosition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update position (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param positionId position identifier (required)
     * @param jobPositionInput Position body object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated position </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with codes * **APPROVAL_PROCESS_ENABLED** when approval process is enabled * ** PERMISSION_DENIED** when job access forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Position not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPositionsUpdateAsync(String jobId, String positionId, JobPositionInput jobPositionInput, final ApiCallback<JobPosition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPositionsUpdateValidateBeforeCall(jobId, positionId, jobPositionInput, _callback);
        Type localVarReturnType = new TypeToken<JobPosition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPublicationAll
     * @param jobId job identifier (required)
     * @param activeOnly publication status filter; defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPublicationAllCall(String jobId, Boolean activeOnly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/publication"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activeOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activeOnly", activeOnly));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPublicationAllValidateBeforeCall(String jobId, Boolean activeOnly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPublicationAll(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPublicationAllCall(jobId, activeOnly, _callback);
        return localVarCall;

    }

    /**
     * Find and list publications for a job
     * Find and list publications for a job
     * @param jobId job identifier (required)
     * @param activeOnly publication status filter; defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @return PublicationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public PublicationList jobsPublicationAll(String jobId, Boolean activeOnly) throws ApiException {
        ApiResponse<PublicationList> localVarResp = jobsPublicationAllWithHttpInfo(jobId, activeOnly);
        return localVarResp.getData();
    }

    /**
     * Find and list publications for a job
     * Find and list publications for a job
     * @param jobId job identifier (required)
     * @param activeOnly publication status filter; defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @return ApiResponse&lt;PublicationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicationList> jobsPublicationAllWithHttpInfo(String jobId, Boolean activeOnly) throws ApiException {
        okhttp3.Call localVarCall = jobsPublicationAllValidateBeforeCall(jobId, activeOnly, null);
        Type localVarReturnType = new TypeToken<PublicationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find and list publications for a job (asynchronously)
     * Find and list publications for a job
     * @param jobId job identifier (required)
     * @param activeOnly publication status filter; defaults to &#39;true&#39; (only active publications are returned); &#39;false&#39; returns active and inactive publications (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPublicationAllAsync(String jobId, Boolean activeOnly, final ApiCallback<PublicationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPublicationAllValidateBeforeCall(jobId, activeOnly, _callback);
        Type localVarReturnType = new TypeToken<PublicationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPublicationCreate
     * @param jobId job identifier (required)
     * @param publication Publication object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **NOT_AUTHORIZED_TO_PUBLISH_JOB** - when user is not authorized to publish the job or approval process for the job is required  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPublicationCreateCall(String jobId, Publication publication, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = publication;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/publication"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPublicationCreateValidateBeforeCall(String jobId, Publication publication, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPublicationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPublicationCreateCall(jobId, publication, _callback);
        return localVarCall;

    }

    /**
     * Publishes a default job ad
     * Publishes default job ad to internal sources and to free job aggregators.  It reflects a Publish action available in the SmartRecruiters UI.  Note:   Internal sources: Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API depend on a company&#39;s payment plan. 
     * @param jobId job identifier (required)
     * @param publication Publication object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **NOT_AUTHORIZED_TO_PUBLISH_JOB** - when user is not authorized to publish the job or approval process for the job is required  </td><td>  -  </td></tr>
     </table>
     */
    public void jobsPublicationCreate(String jobId, Publication publication) throws ApiException {
        jobsPublicationCreateWithHttpInfo(jobId, publication);
    }

    /**
     * Publishes a default job ad
     * Publishes default job ad to internal sources and to free job aggregators.  It reflects a Publish action available in the SmartRecruiters UI.  Note:   Internal sources: Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API depend on a company&#39;s payment plan. 
     * @param jobId job identifier (required)
     * @param publication Publication object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **NOT_AUTHORIZED_TO_PUBLISH_JOB** - when user is not authorized to publish the job or approval process for the job is required  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsPublicationCreateWithHttpInfo(String jobId, Publication publication) throws ApiException {
        okhttp3.Call localVarCall = jobsPublicationCreateValidateBeforeCall(jobId, publication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publishes a default job ad (asynchronously)
     * Publishes default job ad to internal sources and to free job aggregators.  It reflects a Publish action available in the SmartRecruiters UI.  Note:   Internal sources: Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API depend on a company&#39;s payment plan. 
     * @param jobId job identifier (required)
     * @param publication Publication object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with code * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company&#39;s limit for published job ads has been reached  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **NOT_AUTHORIZED_TO_PUBLISH_JOB** - when user is not authorized to publish the job or approval process for the job is required  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPublicationCreateAsync(String jobId, Publication publication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPublicationCreateValidateBeforeCall(jobId, publication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPublicationUnpublish
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPublicationUnpublishCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/publication"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPublicationUnpublishValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsPublicationUnpublish(Async)");
        }
        

        okhttp3.Call localVarCall = jobsPublicationUnpublishCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Unpublishes a job from all sources
     * Unpublishes a job from all sources
     * @param jobId job identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public void jobsPublicationUnpublish(String jobId) throws ApiException {
        jobsPublicationUnpublishWithHttpInfo(jobId);
    }

    /**
     * Unpublishes a job from all sources
     * Unpublishes a job from all sources
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsPublicationUnpublishWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsPublicationUnpublishValidateBeforeCall(jobId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unpublishes a job from all sources (asynchronously)
     * Unpublishes a job from all sources
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> with code * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to access the job  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPublicationUnpublishAsync(String jobId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPublicationUnpublishValidateBeforeCall(jobId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsStatusHistoryGet
     * @param jobId job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job status history </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsStatusHistoryGetCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/status/history"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsStatusHistoryGetValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsStatusHistoryGet(Async)");
        }
        

        okhttp3.Call localVarCall = jobsStatusHistoryGetCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Job status history
     * 
     * @param jobId job identifier (required)
     * @return JobStatusHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job status history </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public JobStatusHistory jobsStatusHistoryGet(String jobId) throws ApiException {
        ApiResponse<JobStatusHistory> localVarResp = jobsStatusHistoryGetWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Job status history
     * 
     * @param jobId job identifier (required)
     * @return ApiResponse&lt;JobStatusHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job status history </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobStatusHistory> jobsStatusHistoryGetWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsStatusHistoryGetValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobStatusHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Job status history (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job status history </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsStatusHistoryGetAsync(String jobId, final ApiCallback<JobStatusHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsStatusHistoryGetValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobStatusHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsStatusUpdate
     * @param jobId job identifier (required)
     * @param jobStatusUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated job status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsStatusUpdateCall(String jobId, JobStatusUpdate jobStatusUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobStatusUpdate;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/status"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsStatusUpdateValidateBeforeCall(String jobId, JobStatusUpdate jobStatusUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsStatusUpdate(Async)");
        }
        
        // verify the required parameter 'jobStatusUpdate' is set
        if (jobStatusUpdate == null) {
            throw new ApiException("Missing the required parameter 'jobStatusUpdate' when calling jobsStatusUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsStatusUpdateCall(jobId, jobStatusUpdate, _callback);
        return localVarCall;

    }

    /**
     * Updates job status
     * 
     * @param jobId job identifier (required)
     * @param jobStatusUpdate  (required)
     * @return JobStatusUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated job status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public JobStatusUpdate jobsStatusUpdate(String jobId, JobStatusUpdate jobStatusUpdate) throws ApiException {
        ApiResponse<JobStatusUpdate> localVarResp = jobsStatusUpdateWithHttpInfo(jobId, jobStatusUpdate);
        return localVarResp.getData();
    }

    /**
     * Updates job status
     * 
     * @param jobId job identifier (required)
     * @param jobStatusUpdate  (required)
     * @return ApiResponse&lt;JobStatusUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated job status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobStatusUpdate> jobsStatusUpdateWithHttpInfo(String jobId, JobStatusUpdate jobStatusUpdate) throws ApiException {
        okhttp3.Call localVarCall = jobsStatusUpdateValidateBeforeCall(jobId, jobStatusUpdate, null);
        Type localVarReturnType = new TypeToken<JobStatusUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates job status (asynchronously)
     * 
     * @param jobId job identifier (required)
     * @param jobStatusUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Updated job status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Job access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsStatusUpdateAsync(String jobId, JobStatusUpdate jobStatusUpdate, final ApiCallback<JobStatusUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsStatusUpdateValidateBeforeCall(jobId, jobStatusUpdate, _callback);
        Type localVarReturnType = new TypeToken<JobStatusUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsUpdate
     * @param jobId job identifier (required)
     * @param jobInput Job object that needs to be updated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsUpdateCall(String jobId, JobInput jobInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jobInput;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsUpdateValidateBeforeCall(String jobId, JobInput jobInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = jobsUpdateCall(jobId, jobInput, _callback);
        return localVarCall;

    }

    /**
     * Updates job
     * Enables you to update job. This operation requires passing an instance of the Job object as part of the PUT request. Ignores all nonexistent job properties and job properties values. Returns an updated job.
     * @param jobId job identifier (required)
     * @param jobInput Job object that needs to be updated (optional)
     * @return JobDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public JobDetails jobsUpdate(String jobId, JobInput jobInput) throws ApiException {
        ApiResponse<JobDetails> localVarResp = jobsUpdateWithHttpInfo(jobId, jobInput);
        return localVarResp.getData();
    }

    /**
     * Updates job
     * Enables you to update job. This operation requires passing an instance of the Job object as part of the PUT request. Ignores all nonexistent job properties and job properties values. Returns an updated job.
     * @param jobId job identifier (required)
     * @param jobInput Job object that needs to be updated (optional)
     * @return ApiResponse&lt;JobDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDetails> jobsUpdateWithHttpInfo(String jobId, JobInput jobInput) throws ApiException {
        okhttp3.Call localVarCall = jobsUpdateValidateBeforeCall(jobId, jobInput, null);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates job (asynchronously)
     * Enables you to update job. This operation requires passing an instance of the Job object as part of the PUT request. Ignores all nonexistent job properties and job properties values. Returns an updated job.
     * @param jobId job identifier (required)
     * @param jobInput Job object that needs to be updated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **DEPARTMENT_NOT_FOUND** when provided department does not exist, * **INDUSTRY_NOT_FOUND** when provided industry does not exist, * **FUNCTION_NOT_FOUND** when provided function does not exist, * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment does not exist, * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does not exist, * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not exist, * **JOB_PROPERTY_REQUIRED** when some job property is required to create job, * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value id does not exist for required property, * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is used for job property, * **VALUE_INACTIVE** when job property&#39;s value is not active and cannot be set. * **INVALID_TEXT_FORMAT** when job property&#39;s value contains invalid text  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Job access denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create job templates.  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Input validation fails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsUpdateAsync(String jobId, JobInput jobInput, final ApiCallback<JobDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsUpdateValidateBeforeCall(jobId, jobInput, _callback);
        Type localVarReturnType = new TypeToken<JobDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
