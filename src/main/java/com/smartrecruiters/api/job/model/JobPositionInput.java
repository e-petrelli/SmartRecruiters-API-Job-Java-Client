/*
 * Jobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.job.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * JobPositionInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-01T16:01:57.232855+01:00[Europe/Rome]")
public class JobPositionInput {
  public static final String SERIALIZED_NAME_POSITION_ID = "positionId";
  @SerializedName(SERIALIZED_NAME_POSITION_ID)
  private String positionId;

  public static final String SERIALIZED_NAME_INCUMBENT_NAME = "incumbentName";
  @SerializedName(SERIALIZED_NAME_INCUMBENT_NAME)
  private String incumbentName;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NEW("NEW"),
    
    REPLACEMENT("REPLACEMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_POSITION_OPEN_DATE = "positionOpenDate";
  @SerializedName(SERIALIZED_NAME_POSITION_OPEN_DATE)
  private OffsetDateTime positionOpenDate;

  public static final String SERIALIZED_NAME_TARGET_START_DATE = "targetStartDate";
  @SerializedName(SERIALIZED_NAME_TARGET_START_DATE)
  private OffsetDateTime targetStartDate;


  public JobPositionInput positionId(String positionId) {
    
    this.positionId = positionId;
    return this;
  }

   /**
   * Get positionId
   * @return positionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPositionId() {
    return positionId;
  }



  public void setPositionId(String positionId) {
    this.positionId = positionId;
  }


  public JobPositionInput incumbentName(String incumbentName) {
    
    this.incumbentName = incumbentName;
    return this;
  }

   /**
   * Get incumbentName
   * @return incumbentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIncumbentName() {
    return incumbentName;
  }



  public void setIncumbentName(String incumbentName) {
    this.incumbentName = incumbentName;
  }


  public JobPositionInput type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")

  public TypeEnum getType() {
    return type;
  }



  public void setType(TypeEnum type) {
    this.type = type;
  }


  public JobPositionInput positionOpenDate(OffsetDateTime positionOpenDate) {
    
    this.positionOpenDate = positionOpenDate;
    return this;
  }

   /**
   * Get positionOpenDate
   * @return positionOpenDate
  **/
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getPositionOpenDate() {
    return positionOpenDate;
  }



  public void setPositionOpenDate(OffsetDateTime positionOpenDate) {
    this.positionOpenDate = positionOpenDate;
  }


  public JobPositionInput targetStartDate(OffsetDateTime targetStartDate) {
    
    this.targetStartDate = targetStartDate;
    return this;
  }

   /**
   * Get targetStartDate
   * @return targetStartDate
  **/
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getTargetStartDate() {
    return targetStartDate;
  }



  public void setTargetStartDate(OffsetDateTime targetStartDate) {
    this.targetStartDate = targetStartDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobPositionInput jobPositionInput = (JobPositionInput) o;
    return Objects.equals(this.positionId, jobPositionInput.positionId) &&
        Objects.equals(this.incumbentName, jobPositionInput.incumbentName) &&
        Objects.equals(this.type, jobPositionInput.type) &&
        Objects.equals(this.positionOpenDate, jobPositionInput.positionOpenDate) &&
        Objects.equals(this.targetStartDate, jobPositionInput.targetStartDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(positionId, incumbentName, type, positionOpenDate, targetStartDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobPositionInput {\n");
    sb.append("    positionId: ").append(toIndentedString(positionId)).append("\n");
    sb.append("    incumbentName: ").append(toIndentedString(incumbentName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    positionOpenDate: ").append(toIndentedString(positionOpenDate)).append("\n");
    sb.append("    targetStartDate: ").append(toIndentedString(targetStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

