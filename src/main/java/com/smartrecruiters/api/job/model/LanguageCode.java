/*
 * Jobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.job.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Language code, can be two-letter for the standard variant or with additional two letters after a hyphen to identify a specific locale  Value \&quot;pt-PT\&quot; is deprecated and will not work, use \&quot;pt\&quot; instead.
 */
@JsonAdapter(LanguageCode.Adapter.class)
public enum LanguageCode {
  
  AF("af"),
  
  AM("am"),
  
  AR("ar"),
  
  HY("hy"),
  
  AZ("az"),
  
  EU("eu"),
  
  BN("bn"),
  
  BG("bg"),
  
  CA("ca"),
  
  ZH_CN("zh-CN"),
  
  ZH_TW("zh-TW"),
  
  HR("hr"),
  
  CS("cs"),
  
  DA("da"),
  
  NL("nl"),
  
  EN_GB("en-GB"),
  
  EN("en"),
  
  ET("et"),
  
  FI("fi"),
  
  FR("fr"),
  
  FR_CA("fr-CA"),
  
  GL("gl"),
  
  KA("ka"),
  
  DE("de"),
  
  EL("el"),
  
  GU("gu"),
  
  IW("iw"),
  
  HI("hi"),
  
  HU("hu"),
  
  IS("is"),
  
  ID("id"),
  
  GA("ga"),
  
  IT("it"),
  
  JA("ja"),
  
  KN("kn"),
  
  KM("km"),
  
  KO("ko"),
  
  LO("lo"),
  
  LV("lv"),
  
  LT("lt"),
  
  MS("ms"),
  
  ML("ml"),
  
  MR("mr"),
  
  MN("mn"),
  
  NE("ne"),
  
  NO("no"),
  
  FA("fa"),
  
  FIL("fil"),
  
  PL("pl"),
  
  PT("pt"),
  
  PT_BR("pt-BR"),
  
  PT_PT("pt-PT"),
  
  RO("ro"),
  
  RU("ru"),
  
  SR("sr"),
  
  SI("si"),
  
  SK("sk"),
  
  SL("sl"),
  
  ES("es"),
  
  SW("sw"),
  
  SV("sv"),
  
  TA("ta"),
  
  TE("te"),
  
  TR("tr"),
  
  UK("uk"),
  
  UR("ur"),
  
  VI("vi"),
  
  CY("cy"),
  
  ZU("zu");

  private String value;

  LanguageCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LanguageCode fromValue(String value) {
    for (LanguageCode b : LanguageCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LanguageCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final LanguageCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LanguageCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LanguageCode.fromValue(value);
    }
  }
}

